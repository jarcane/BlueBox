VIOLET
Language Documentation

History

VIOLET was developed for the Buttech CAI-1 "Blue Box", and served as the default ROM for the CAI-1. Licensing a BASIC interpreter was too expensive for the project's budget, and the programmer in charge of the requested PILOT implementation quit in protest, leaving a quickly promoted intern student from Butte County Community College with the task of quickly developing a suitable language. 

VIOLET (short for Verbose Interpreted Operating Language for Educational Terminals) was the result. A gross mish-mash of PILOT, BASIC, FORTH, and even LISP, VIOLET nonetheless remained in use in the Butte County school system well into the 1990s, and some have blamed the county's poor turnout for quality software engineers directly on VIOLET's continued use and influence on impressionable young minds.

The Editor

VIOLET does not follow a typical REPL loop such as many other interpreted languages, but instead begins operation in its editor mode. This is a simple line editor, with support for file save and load. 

Its commands (or 'controls' in VIOLET terminology) are listed below, with arguments in lowercase. All arguments for editor controls are mandatory.

Control of the VIOLET editor switches between two modes: control mode, and entry mode. In control mode, the prompt '> ' appears, and controls may be entered. Some controls 
will begin entry mode (indicated with a *), in which the user will be instead prompted with numbered prompts, into which a new code line can be entered. Entry mode can be exited by entering an empty line. 

BEGIN*:
Begins a new program and enters entry mode. 

APPEND*:
Enters entry mode, adding new lines to the end of resident program in memory. Returns an error if no program is present.

INSERT line*:
Enters entry mode, inserting new lines at the point designated with the line argument. Returns error if line is not a number, is not in the range of current program length, or there is no program resident in memory.

DELETE startline endline:
Removes lines from the program from startline (inclusive) to endline (exclusive). Returns an error if arguments are not numbers, if they exceed range of current program length, or no program is in memory.

LIST:
Lists the present program, preceded by line numbers. Returns an error if no program is resident.

SAVE filename:
Saves the contents of the current program to a file called (filename)

LOAD filename:
Loads the contents of a file called filename, or returns an error if it doesn't exist.

DIR
Lists the contents of the working directory (note: this is not a 100% authentic handling, but has been implemented for usability's sake.)

RUN:
Sends the current program in memory to the interpreter and attempts to execute it.

EXIT:
Exits the interpreter. (Note: On the original hardware this would quit to the built in monitor; here it just exits the program)


Basic Structure

Each line in a VIOLET program consists of an "operator", and its arguments. The operator must begin the line, and if the interpreter fails to find a valid operator, it will quit.

Every operator essentially acts as a function, and thus returns a value in addition to any other effects, which is stored in a built-in variable called &LAST. This is used both internally to handle conditional statements, and can be called upon to apply the result of previous mathematical operations to a variable.  For example: 

ADD #X 45
SET #X %LAST

is a statement roughly equivalent to "x = x + 45" as might be found in other languages.

All programs MUST begin with the declarative operator PROGRAM, taking START as its argument, and end with PROGRAM STOP. This is especially necessary because the VIOLET editor operates in plain text and VIOLET code is not tokenized like other contemporary languages, thus requiring a clear statement of initialization to distinguish a program file from arbitrary text documents.

Variable Conventions

Variables in VIOLET consist of three types, indicated by their preceding symbol:

#VAR (numeric value)
$VAR (string)
&VAR (dump, reserved for %LAST)

Numeric values are fuzzy typed, like BASIC, being floats or ints as needed.
String values are sequences of ASCII characters

The "dump" variable is a special type, reserved solely for the &LAST value, and may at any given time contain either a string or a number. Care should thus be taken when calling &LAST to ensure it contains the right value.

Note also that unlike some languages, bare declarations of variables are NOT allowed in VIOLET, and must always begin with the operator SET. SET takes two arguments, a variable name, and an appropriate value to the variable type. SET will fail on a mismatch, or on attempt to assign a new dump or to &LAST.